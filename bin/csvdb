#!/usr/bin/env python3

import argparse
import csv
import mysql.connector
import sys

# Parse command-line arguments
parser = argparse.ArgumentParser(description="Import a CSV/TSV file into a MySQL database")
parser.add_argument("database", help="the name of the MySQL database to use")
parser.add_argument("table", help="the name of the table to create in the database")
parser.add_argument("--tsv", action="store_true", help="use TSV format instead of CSV")
parser.add_argument("--no-create", action="store_true", help="do not try to create the table")
parser.add_argument("--varchar", type=int, default=255, help="the length of VARCHAR columns")
args = parser.parse_args()

# Connect to the MySQL server
cnx = mysql.connector.connect(host="127.0.0.1", database=args.database)
cursor = cnx.cursor()

# Read the CSV/TSV file from stdin
if args.tsv:
    reader = csv.reader(sys.stdin, delimiter="\t")
else:
    reader = csv.reader(sys.stdin)

# Get the headers from the first row of the file
headers = next(reader)

if not args.no_create:
    # Create the table in the database
    columns = ", ".join("`{}` VARCHAR({})".format(header, args.varchar) for header in headers)
    create_table_query = "CREATE TABLE `{}` ({})".format(args.table, columns)
    cursor.execute(create_table_query)

# Insert the data into the table
for row in reader:
    values = ", ".join("'{}'".format(value) for value in row)
    insert_query = "INSERT INTO `{}` ({}) VALUES ({})".format(args.table, ", ".join("`{}`".format(header) for header in headers), values)
    try:
        cursor.execute(insert_query)
    except Exception as e:
        print("Error inserting row:", file=sys.stderr)
        print(insert_query, file=sys.stderr)
        print(e, file=sys.stderr)

# Commit the changes and close the connection
cnx.commit()
cnx.close()