#!/usr/bin/env python3

# # plt - a command line tool for plotting data
#
# ## example usage
#
# ```shell
# $ cat data.csv | plt "insertions, date { plot 1px solid red }" | imgcat --width=100
# $ cat data.csv | plt "deletions, date { bar 20px solid green }" | imgcat --width=100
# $ cat data.csv | plt "[insertions, deletions], date { stackbar 20px [solid orange, solid blue]}" > chart.png
#
# $ plt "insertions, date { plot 5px solid red } deletions, date { bar 20px solid #DDFF21 }" < data.csv > combined.png
#
# $ plt "insertions, date { plot 5px solid red } deletions, date { bar 20px solid #D3F }" --py > combined.py
# $ cat data.csv | python3 combined.py > combined.png
# ```
#
# ## grammar
#
# ```ebnf
# program = command*;
# command = fields "{" display "}";
# fields = FIELDNAME "," FIELDNAME* | "[" FIELDNAME "," FIELDNAME* "]" "," FIELDNAME;
# display = "plot" style | "bar" style | "stackbar" stackbar_style;
# style = WIDTH DRAW_STYLE COLOR;
# stackbar_style = WIDTH "[" DRAW_STYLE COLOR "," DRAW_STYLE COLOR "]";
# FIELDNAME = [a-zA-Z0-9_]+;
# WIDTH = [0-9]+ "px";
# DRAW_STYLE = "solid" | "dashed" | "dotted";
# COLOR = "red" | "green" | "blue" | "orange" | "black" | "#" [0-9a-fA-F]{6} | "#" [0-9a-fA-F]{3};
# ```

import os
import tempfile
import subprocess
import sys
from ply import lex, yacc
import argparse
import pprint

#
# LANGUAGE DEFINITION
#

color_names = ['red', 'green', 'blue', 'orange', 'black']
draw_styles = ['solid', 'dashed', 'dotted']

# Define the reserved words
reserved = {
    'plot': 'PLOT',
    'bar': 'BAR',
    'stackbar': 'STACKBAR'
}

reserved.update({color: 'COLOR' for color in color_names})
reserved.update({draw_style: 'DRAW_STYLE' for draw_style in draw_styles})

# Define the lexer tokens
tokens = (
    'FIELDNAME',
    'WIDTH',
) + tuple(set(reserved.values()))

# Define the lexer rules
draw_styles_regex = '|'.join(draw_styles)
t_DRAW_STYLE = f'({draw_styles_regex})'

color_names_regex = '|'.join(color_names)
hex_color_regex = r'\#\w{6}|\#\w{3}'
t_COLOR = f'({color_names_regex}|{hex_color_regex})'

t_WIDTH = r'\d+px'

def t_FIELDNAME(t):
    r'[a-zA-Z_][a-zA-Z0-9_]*' # field names must start with a letter or underscore
    t.type = reserved.get(t.value, 'FIELDNAME') # Check for reserved words
    return t

t_ignore  = ' \t\n' # ignore whitespace and newlines

def t_error(t):
    print("Unknown token:", t.value)
    t.lexer.skip(1)

literals = ['[', ']', '{', '}', ',']

# Matplotlib commands
matplotlib_commands = []
matplotlib_command = {}

# Define the parser rules
def p_program(p):
    '''program : command
               | program command'''
    pass

def p_command(p):
    '''command : fields '{' display '}' '''
    if 'y_fieldnames' in matplotlib_command:
        del matplotlib_command['y_fieldname']
    matplotlib_commands.append(matplotlib_command.copy())
    matplotlib_command.clear()
    pass

def p_fields(p):
    '''fields : FIELDNAME ',' FIELDNAME
              | fields ',' FIELDNAME
              | '[' fields ']' ',' FIELDNAME'''
    if (p[1] == '['):
        matplotlib_command.update({'y_fieldnames': p[2], 'x_fieldname': p[5]})
    else:
        if isinstance(p[1], list):
            matplotlib_command.update({'y_fieldnames': p[1], 'x_fieldname': p[3]})
        else:
            matplotlib_command.update({'y_fieldname': p[1], 'x_fieldname': p[3]})
    if not isinstance(p[1], list):
        p[0] = [p[1], p[3]]
    else:
        p[0] = p[1] + [p[3]]
    pass

def p_display(p):
    '''display : PLOT WIDTH style
               | BAR WIDTH style
               | BAR WIDTH '[' stackbar_style ']'
               | STACKBAR WIDTH '[' stackbar_style ']' '''
    matplotlib_command.update({'plot_style': p[1], 'width': int(p[2][:-2])})
    pass

def p_style(p):
    '''style : DRAW_STYLE COLOR'''
    matplotlib_command.update({'draw_style': p[1], 'color': p[2]})
    pass

def p_stackbar_style(p):
    '''stackbar_style : DRAW_STYLE COLOR ',' DRAW_STYLE COLOR
                      | stackbar_style ',' DRAW_STYLE COLOR'''
    if (len(p) == 5):
        p[1] += [{'draw_style': p[3], 'color': p[4]}]
        matplotlib_command.update({'styles': p[1]})
    if (len(p) == 6):
        matplotlib_command.update({'styles': [{'draw_style': p[1], 'color': p[2]}, {'draw_style':p[4], 'color':p[5]}]})    
    if not isinstance(p[1], list):
        p[0] = [{'draw_style': p[1], 'color': p[2]}, {'draw_style':p[4], 'color':p[5]}]
    else:
        p[0] = p[1] + [{'draw_style': p[3], 'color': p[4]}]

    pass

def p_error(p):
    print("Syntax error in input:", p)

# Build the lexer and parser
lexer = lex.lex()
parser = yacc.yacc()

#
# COMMAND LINE INTERFACE
#

# Define the parser for the plt language
plt_parser = argparse.ArgumentParser(add_help=False)
plt_parser.add_argument('plt', nargs='?', type=str, help='The plt language string')

# Parse the command line arguments
parser = argparse.ArgumentParser(parents=[plt_parser])
parser.add_argument('--py', action='store_true', help='Print the generated Python code and exit')
parser.add_argument('--debug', action='store_true', help='Print commands and exit')
args = parser.parse_args()

#
# MATPLOTLIB COMMANDS GENERATION
#

# Check if the plt language string is provided
if args.plt:
    # Parse the plt language string using the lexer and parser
    parser = yacc.yacc()
    # A single pass compiler builds the matplotlib commands as we parse the plt language string
    parser.parse(args.plt)

#
# DEBUGGING
#

# Print the commands and exit if the --debug flag is used
if args.debug:
    print("\n\033[4mTokens\033[0m\n")
    lexer.input(args.plt)
    for tok in lexer:
        print(tok)
    print("\n\033[4mCommands\033[0m\n")
    for command in matplotlib_commands:
        pprint.pprint(command)
        print()
    sys.exit()

#
# PYTHON CODE GENERATION
#

output = """#!/usr/bin/env python3

import csv
import sys
import io
import matplotlib.pyplot as plt
import numpy as np

# Read CSV or TSV from STDIN
input_file = io.StringIO(sys.stdin.read())
first_line = input_file.readline()
input_file.seek(0)

if '\\t' in first_line:
    # The input data is tab-delimited
    reader = csv.DictReader(input_file, delimiter='\\t')
else:
    # The input data is comma-delimited
    reader = csv.DictReader(input_file)

data = {k: [] for k in reader.fieldnames}
for row in reader:
    for k, v in row.items():
        data[k].append(v)

# Generate the plot
fig, ax = plt.subplots(figsize=(8, 5))
"""

# Iterate over the matplotlib commands array and create the respective plot types
for command in matplotlib_commands:
    if 'y_fieldname' in command:
        output += f"\n\n### {command['plot_style'].replace('_', ' ').replace('-', ' ').title()}: [{command['y_fieldname']}, {command['x_fieldname']}]"
    else:
        output += f"\n\n### {command['plot_style'].replace('_', ' ').replace('-', ' ').title()}: [{command['y_fieldnames']}, {command['x_fieldname']}]"
    output += f"\nx = np.arange(len(data['{command['x_fieldname']}']))"
    if 'y_fieldname' in command:
        output += f"\nx_value = data['{command['x_fieldname']}']"
        output += f"\ny_{command['y_fieldname']}_value = [float(y) for y in data['{command['y_fieldname']}']]"
        output += f"\nwidth = {command['width'] / 50}"
        if command['plot_style'] == 'plot':
            output += f"\nax.plot(x_value, y_{command['y_fieldname']}_value, color='{command['color']}', linewidth={command['width']})"
        elif command['plot_style'] == 'bar':
            output += f"\nax.bar(x_value, y_{command['y_fieldname']}_value, color='{command['color']}', width={command['width'] / 50}, alpha=0.5)"
    elif 'y_fieldnames' in command and 'styles' in command:
        output += f"\ny_values = [np.array([float(y) for y in data[field]]) for field in {command['y_fieldnames']}]"
        output += f"\nstyles = {command['styles']}"
        output += f"\nwidth = {command['width'] / 50}"
        output += f"\nmultiplier = 0"
        output += f"\nfor index, field in enumerate({command['y_fieldnames']}):"
        output += f"\n    offset = width * multiplier"
        output += f"\n    rects = ax.bar(x + offset, y_values[index], width, color=styles[index]['color'], linewidth=1)"
        output += f"\n    multiplier += 1"
output += f"\n\n# Update the legend names and labels"
if 'y_fieldname' in command:
    output += f"\nlegend_names = {[command['y_fieldname'].replace('_', ' ').replace('-', ' ').title() for command in matplotlib_commands]}"
else: # TODO: this is wrong we need to be combining all x fieldnames and then getting the unique values
    output += f"\nlegend_names = {[field.replace('_', ' ').replace('-', ' ').title() for field in command['y_fieldnames']]}"
output +=f"""
ax.legend(legend_names)

# Replace underscores and dashes with spaces, and capitalize the first letter of each word
x_label = "{matplotlib_commands[0]['x_fieldname']}".replace('_', ' ').replace('-', ' ').title()

ax.set_xlabel(x_label)
ax.set_xticks(x + width, data['{command['x_fieldname']}'])
plt.xticks(rotation=90)
ax.set_ylabel('Count')

fig.subplots_adjust(bottom=0.2)

# Save the plot to stdout as a PNG image
plt.savefig(sys.stdout.buffer, format='png')"""

#
# PRINT PYTHON CODE WITH TEXT OUTPUT
#

# Print the generated Python code and exit if the --py flag is used
if args.py:
    print(output)
    sys.exit()

#
# EXECUTE PYTHON CODE WITH PNG OUTPUT
#

# Save the plot to a temporary file
with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
    f.write(output)
    temp_file = f.name

# Execute the temporary file using subprocess.run()
subprocess.run(['python3', temp_file], stdin=sys.stdin, stdout=sys.stdout)

# Delete the temporary file
os.unlink(temp_file)
