#!/usr/bin/env python3

import sys
import subprocess
import csv
import argparse
import re

# Parse command line arguments
parser = argparse.ArgumentParser(description='Export git log data to CSV files.')
parser.add_argument('--commits', action='store_true', help='output git commits table (default)')
parser.add_argument('--file-changes', action='store_true', help='output git file changes table')
args = parser.parse_args()

if not args.commits and not args.file_changes:
    args.commits = True

# Call git log and parse the output
if args.commits:
    git_log = subprocess.check_output(['git', 'log', '--pretty=format::::::%an::%ad::%ae::%H::%cd::%cn::%ce::%s', '--all', '--shortstat', '--reverse', '--date=format:%Y-%m-%d %H:%M:%S'])
    commits = git_log.decode('utf-8').split(':::::')
    fieldnames = ['commit_hash', 'commit_date', 'committer', 'committer_email', 'title', 'author', 'author_date', 'author_email', 'files_changed', 'insertions', 'deletions']
    writer = csv.DictWriter(sys.stdout, fieldnames=fieldnames)
    writer.writeheader()

    for commit in commits:
        if commit:
            # Parse the commit data
            try:
                commit_data, stats = commit.split('\n', 1)
                author, author_date, author_email, commit_hash, commit_date, committer, committer_email, title = commit_data.split('::')

                files_changed_match = re.search(r'(\d+) files? changed', stats)
                files_changed = files_changed_match.group(1) if files_changed_match else 0

                insertions_match = re.search(r'(\d+) insertions?', stats)
                insertions = insertions_match.group(1) if insertions_match else 0

                deletions_match = re.search(r'(\d+) deletions?', stats)
                deletions = deletions_match.group(1) if deletions_match else 0
                
                # Write the commit data to stdout
                writer.writerow({'author': author, 'author_date': author_date, 'author_email': author_email, 'commit_hash': commit_hash, 'commit_date': commit_date, 'committer': committer, 'committer_email': committer_email, 'title': title, 'files_changed': files_changed, 'insertions': insertions, 'deletions': deletions})
            except:
                print("Error parsing commit data: " + commit)

if args.file_changes:
    git_log = subprocess.check_output(['git', 'log', '--numstat', '--reverse'])
    commits = git_log.decode('utf-8').split('\ncommit ')
    commits[0] = commits[0].split("commit ")[1]
    fieldnames = ['commit_hash', 'file_name', 'insertions', 'deletions']
    writer = csv.DictWriter(sys.stdout, fieldnames=fieldnames)
    writer.writeheader()

    for commit in commits:
        if commit:
            commit_lines = commit.split('\n')
            commit_hash = commit_lines[0]
            file_changes = []
            for line in commit_lines:
                match = re.match(r'^(\d+)\t(\d+)\t(.+)$', line)
                if match:
                    insertions, deletions, file_name = match.groups()
                    file_changes.append({'insertions': insertions, 'deletions': deletions, 'file_name': file_name})

            for file_change in file_changes:
                if file_change:
                    # Write the file change data to stdout
                    writer.writerow({'commit_hash': commit_hash, 'file_name': file_change['file_name'], 'insertions': file_change['insertions'], 'deletions': file_change['deletions']})