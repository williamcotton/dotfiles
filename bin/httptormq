#!/usr/bin/env node

const express = require('express');
const amqp = require('amqplib/callback_api');
const uuid = require('uuid');

const app = express();

const connectionUrl = 'amqp://localhost';
const exchangeName = '';
const queueName = '';

app.use(express.json());

app.all('*', (req, res) => {
  let rawRequest = `${req.method} ${req.originalUrl} HTTP/1.1\r\n`;
  for (const [key, value] of Object.entries(req.headers)) {
    rawRequest += `${key}: ${value}\r\n`;
  }
  rawRequest += '\r\n'; // TODO: append body

  let response = 'Timeout';

  const correlationId = uuid.v4();

  amqp.connect(connectionUrl, (err, conn) => {
    if (err) {
      console.error(err);
      return res.status(500).send('Internal Server Error');
    }

    conn.createChannel((err, ch) => {
      if (err) {
        console.error(err);
        return res.status(500).send('Internal Server Error');
      }

      const timer = setTimeout(() => {
        conn.close();
        res.send(response);
      }, 200);

      const onMessage = (msg) => {
        if (msg.properties.correlationId === correlationId) {
          message = msg.content.toString();
          const [request, response] = message.split("%%%----------%%%\n");
          clearTimeout(timer);
          ch.ack(msg);
          conn.close();
          res.send(response);
        }
      };

      ch.assertQueue(queueName, { exclusive: true }, (err, q) => {
        if (err) {
          console.error(err);
          return res.status(500).send('Internal Server Error');
        }

        ch.consume(q.queue, onMessage, { noAck: false });

        ch.publish(
          exchangeName,
          req.path,
          Buffer.from(rawRequest),
          {
            correlationId,
            replyTo: q.queue,
          },
          (err, ok) => {
            if (err) {
              console.error(err);
              return res.status(500).send('Internal Server Error');
            }
          }
        );
      });
    });
  });
});

const port = process.argv[2] || 5000;
app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});
