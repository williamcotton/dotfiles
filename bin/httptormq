#!/usr/bin/env python3

import sys
from flask import Flask, request
import pika
import uuid

app = Flask(__name__)


# Define a route to handle all incoming requests
@app.route(
    "/", defaults={"path": ""}, methods=["GET", "POST", "PUT", "DELETE", "PATCH"]
)
@app.route("/<path:path>", methods=["GET", "POST", "PUT", "DELETE", "PATCH"])
def handle_request(path):
    # Build up the raw HTTP request
    raw_request = request.method + " " + request.path + " HTTP/1.1\r\n"
    for key, value in request.headers.items():
        raw_request += key + ": " + value + "\r\n"
    raw_request += "\r\n" + request.get_data(as_text=True)

    response = "Timeout"

    def on_response(ch, method, props, body):
        if correlation_id == props.correlation_id:
            nonlocal response
            response = body

    correlation_id = str(uuid.uuid4())

    connection = pika.BlockingConnection(pika.ConnectionParameters(host="localhost"))
    channel = connection.channel()
    result = channel.queue_declare(queue="", exclusive=True)
    callback_queue = result.method.queue

    channel.basic_consume(
        queue=callback_queue, on_message_callback=on_response, auto_ack=True
    )

    channel.basic_publish(
        exchange="",
        routing_key="rpc_queue",
        properties=pika.BasicProperties(
            reply_to=callback_queue,
            correlation_id=correlation_id,
        ),
        body=str(raw_request),
    )
    connection.process_data_events(time_limit=2)
    return response


if __name__ == "__main__":
    # Get the port number from the command line arguments
    port = int(sys.argv[1]) if len(sys.argv) > 1 else 5000

    # Start the Flask server
    app.run(port=port)
